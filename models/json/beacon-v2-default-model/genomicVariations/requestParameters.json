{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "g_variant": {
        "properties": {
            "alternateBases": {
                "$ref": "./requestParametersComponents.json#/definitions/AlternateBases"
            },
            "aminoacidChange": {
                "description": "Aminoacid alteration of interest. Format 1 letter",
                "examples": [
                    "V600E",
                    "M734V"
                ],
                "type": "string"
            },
            "assemblyId": {
                "$ref": "./requestParametersComponents.json#/definitions/Assembly"
            },
            "end": {
                "description": "Precise or bracketing the end of the variants of interest: * (0-based, exclusive) - see `start` * for bracket queries, provide 2 values (e.g. [111,222]).\"",
                "items": {
                    "format": "int64",
                    "minimum": 1,
                    "type": "integer"
                },
                "maxItems": 2,
                "minItems": 1,
                "type": "array"
            },
            "geneId": {
                "description": "* A gene identifier * It is strongly suggested to use a symbol following\n  the HGNC (https://www.genenames.org) nomenclature.",
                "examples": [
                    "BRAF",
                    "SCN5A"
                ],
                "type": "string"
            },
            "genomicAlleleShortForm": {
                "description": "HGVSId descriptor",
                "examples": [
                    "NM_004006.2:c.4375C>T"
                ],
                "type": "string"
            },
            "mateName": {
                "$ref": "./requestParametersComponents.json#/definitions/RefSeqId"
            },
            "referenceBases": {
                "$ref": "./requestParametersComponents.json#/definitions/ReferenceBases"
            },
            "referenceName": {
                "$ref": "./requestParametersComponents.json#/definitions/RefSeqId"
            },
            "start": {
                "description": "Precise or fuzzy start coordinate position(s), allele locus (0-based, inclusive). * `start` only:\n  - for single positions, e.g. the start of a specified sequence\n    alteration where the size is given through the specified `alternateBases`\n  - typical use are queries for SNV and small InDels\n  - the use of `start` without an `end` parameter requires the use of\n    `alternateBases`\n* 1 value in both `start` and `end`:\n  - for searching any variant falling fully or partially within the range\n    between `start` and `end` (a.k.a. \"range query\")\n  - additional use of `variantType` OR `alternateBases` can limit the\n    scope of the query\n  - by convention, partial overlaps of variants with the indicated genomic\n    range are accepted; for specific overlap requirements the 4-parameter\n    \"Bracket Queries\" should be employed\n* 2 values in both `start` and `end` for constructing a \"Bracket Query\":\n  - can be used to match any contiguous genomic interval, e.g. for querying\n    imprecise positions\n  - identifies all structural variants starting between `start[0]` and `start[1]`,\n    and ending between `end[0]` <-> `end[1]`\n  - single or double sided precise matches can be achieved by setting\n    `start[1]=start[0]+1` and `end[1]=end[0]+1`",
                "items": {
                    "format": "int64",
                    "minimum": 0,
                    "type": "integer"
                },
                "maxItems": 2,
                "minItems": 1,
                "type": "array"
            },
            "variantMaxLength": {
                "description": "* Maximum length in bases of a genomic variant. * This is an optional parameter without prescribed use. While a length is\n  commonly available for structural variants such as copy number variations,\n  it is recommended that length based queries should also be supported for\n  variants with indicated referenceBases and alternateBases, to enable\n  length-specific wildcard queries.",
                "format": "int64",
                "minimum": 1,
                "type": "integer"
            },
            "variantMinLength": {
                "description": "* Minimum length in bases of a genomic variant * This is an optional parameter without prescribed use. While a length is\n  commonly available for structural variants such as copy number variations,\n  it is recommended that length based queries should also be supported for\n  variants with indicated referenceBases and alternateBases, to enable\n  length-specific wildcard queries.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
            },
            "variantType": {
                "description": "The `variantType` is used to query variants which are not defined through a sequence of one or more bases using the `alternateBases` parameter. Examples here are e.g. structural variants: * DUP\n  - increased allelic count of material from the genomic region between\n    `start` and `end` positions\n  - no assumption about the placement of the additional sequences is being\n    made (i.e. no _in situ_ requirement as tandem duplications)\n* DEL: deletion of sequence following `start` The Beacon model is not prescriptive with regard to the values allowed for `variantType` with use of extended types (such as from `EFO:0030063`) being permitted. However, a support for the basic CNV types above - where represented in the data - is recommended.",
                "examples": [
                    "EFO:0030070",
                    "DUP",
                    "DEL",
                    "EFO:0030069"
                ],
                "type": "string"
            }
        },
        "type": "object"
    }
}